name: Push to PyPI

on:
  push:
    tags: v*
    branches: pypi-deploy

  workflow_dispatch:



jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.7, 3.8, 3.9]
        
    runs-on: ${{ matrix.os }}
    
    environment: PyPI
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/tags/v1.0.1 # temporary
      
      - name: Install GCC and Python (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt-get update -qq
          sudo apt install gcc-10 g++-10
          sudo apt install python${{ matrix.python }}-dev python${{ matrix.python }}-venv 
          python${{ matrix.python }} -m venv pyvenv/
          source pyvenv/bin/activate
          which python3
          which pip3

      - name: Install GCC and Python (MacOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install gcc@10 python@${{ matrix.python }}
          /usr/local/opt/python@${{ matrix.python }}/bin/python3 -m venv pyvenv/
          
      - name: Verify python installation
        run: |
          source pyvenv/bin/activate
          which python3
          python3 --version
          python3 -c "import sys; sys.exit(not sys.version.startswith('${{ matrix.python }}'))"
          
      - name: Install numpy and cython
        run: |
          source pyvenv/bin/activate
          pip3 install numpy cython
      
      - name: Determine version tag
        run: |
          source pyvenv/bin/activate
          echo "SETUP_VERSION=`python3 setup.py --version`" >> $GITHUB_ENV
          echo "VERSION_TAG=`git describe --tags | cut -c 2-`" >> $GITHUB_ENV
        
      - name: Verify version naming is consistent
        run: |
          if [ "${{ env.VERSION_TAG }}" == "${{ env.SETUP_VERSION }}" ]; then
              echo Git tag and python setup.py versions match: ${{ env.VERSION_TAG }}
          else
              echo Version label mismatch
              echo Git tag-derived version is ${{ env.VERSION_TAG }}
              echo setup.py-derived version is ${{ env.SETUP_VERSION }}
              exit 1;
          fi
          
      - name: Install twine, setuptools, pip, wheel
        run: | 
          source pyvenv/bin/activate
          pip3 install -U twine setuptools pip wheel
          
          
      - name: Build source distribution
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.9'
        run: source pyvenv/bin/activate; python3 setup.py sdist
        
      - name: Build binary distribution
        run: source pyvenv/bin/activate; python3 setup.py bdist_wheel
        
      - name: Twine upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: | 
          source pyvenv/bin/activate
          twine check dist/* # when ready, we'll use upload --repository testpypi
